{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/app/review/page.tsx"],"sourcesContent":["import { google } from 'googleapis';\r\nimport { NextResponse } from 'next/server';\r\nimport path from 'path';\r\n\r\n// File: app/api/fetch-submissions/route.ts\r\nexport async function GET(req: Request) {\r\n  try {\r\n    // Parse query params for filtering\r\n    const url = new URL(req.url);\r\n    const bank = url.searchParams.get('bank')?.trim() || '';\r\n    const segment = url.searchParams.get('segment')?.trim() || '';\r\n\r\n    // Authenticate using local credentials file\r\n    const auth = new google.auth.GoogleAuth({\r\n      keyFile: path.join(process.cwd(), 'google-credentials.json'),\r\n      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],\r\n    });\r\n\r\n    const sheets = google.sheets({ version: 'v4', auth });\r\n    const spreadsheetId = '1GwTyj7g0pbqyvwBiWbUXHi_J1qboJ2rryXgCXtpnvLM';\r\n    // Range now includes BankName (H) and Segment (I)\r\n    const range = 'Submissions!A2:I';\r\n\r\n    const response = await sheets.spreadsheets.values.get({ spreadsheetId, range });\r\n    const rows = response.data.values || [];\r\n\r\n    // Map and filter based on bank & segment\r\n    const filtered = rows\r\n      .map((row, idx) => ({\r\n        rowIndex: idx,\r\n        OriginalQuery: row[0] || '',\r\n        Prompt: row[1] || '',\r\n        ModifiedQuery: row[2] || '',\r\n        Status: row[3] || '',\r\n        SubmittedBy: row[4] || '',\r\n        ApprovedBy: row[5] || '',\r\n        Timestamp: row[6] || '',\r\n        BankName: row[7] || '',\r\n        Segment: row[8] || '',\r\n      }))\r\n      .filter(item =>\r\n        (!bank || item.BankName === bank) &&\r\n        (!segment || item.Segment === segment)\r\n      );\r\n\r\n    return NextResponse.json(filtered);\r\n  } catch (err) {\r\n    console.error('Error fetching submissions:', err);\r\n    return NextResponse.json({ error: 'Failed to fetch submissions' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,mCAAmC;QACnC,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,OAAO,IAAI,YAAY,CAAC,GAAG,CAAC,SAAS,UAAU;QACrD,MAAM,UAAU,IAAI,YAAY,CAAC,GAAG,CAAC,YAAY,UAAU;QAE3D,4CAA4C;QAC5C,MAAM,OAAO,IAAI,mJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;YAClC,QAAQ;gBAAC;aAAwD;QACnE;QAEA,MAAM,SAAS,mJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QACnD,MAAM,gBAAgB;QACtB,kDAAkD;QAClD,MAAM,QAAQ;QAEd,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE;YAAe;QAAM;QAC7E,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QAEvC,yCAAyC;QACzC,MAAM,WAAW,KACd,GAAG,CAAC,CAAC,KAAK,MAAQ,CAAC;gBAClB,UAAU;gBACV,eAAe,GAAG,CAAC,EAAE,IAAI;gBACzB,QAAQ,GAAG,CAAC,EAAE,IAAI;gBAClB,eAAe,GAAG,CAAC,EAAE,IAAI;gBACzB,QAAQ,GAAG,CAAC,EAAE,IAAI;gBAClB,aAAa,GAAG,CAAC,EAAE,IAAI;gBACvB,YAAY,GAAG,CAAC,EAAE,IAAI;gBACtB,WAAW,GAAG,CAAC,EAAE,IAAI;gBACrB,UAAU,GAAG,CAAC,EAAE,IAAI;gBACpB,SAAS,GAAG,CAAC,EAAE,IAAI;YACrB,CAAC,GACA,MAAM,CAAC,CAAA,OACN,CAAC,CAAC,QAAQ,KAAK,QAAQ,KAAK,IAAI,KAChC,CAAC,CAAC,WAAW,KAAK,OAAO,KAAK,OAAO;QAGzC,OAAO,8HAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,8HAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}