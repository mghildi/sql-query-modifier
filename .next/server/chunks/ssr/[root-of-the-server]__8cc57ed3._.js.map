{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/app/review/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport DiffMatchPatch from 'diff-match-patch';\r\n\r\ntype Submission = {\r\n  rowIndex:      number;\r\n  BankName:      string;\r\n  Segment:       string;\r\n  OriginalQuery: string;\r\n  Prompt:        string;\r\n  ModifiedQuery: string;\r\n  Status:        string;\r\n  SubmittedBy:   string;\r\n  ApprovedBy:    string;\r\n  Timestamp:     string;\r\n};\r\n\r\ntype SegmentMapping = { bank: string; segment: string };\r\n\r\nexport default function ReviewPage() {\r\n  const [submissions, setSubmissions]               = useState<Submission[]>([]);\r\n  const [bank, setBank]                             = useState('');\r\n  const [segment, setSegment]                       = useState('');\r\n  const [reviewer, setReviewer]                     = useState('Mohit');\r\n  const [customReviewer, setCustomReviewer]         = useState('');\r\n  const [availableBanks, setAvailableBanks]         = useState<string[]>([]);\r\n  const [segmentMapping, setSegmentMapping]         = useState<SegmentMapping[]>([]);\r\n  const [availableSegments, setAvailableSegments]   = useState<string[]>([]);\r\n  const [filtered, setFiltered]                     = useState<Submission[]>([]);\r\n\r\n  // 1) Load master bank/segment list from Sheet1\r\n  useEffect(() => {\r\n    fetch('/api/fetch-bank-segment')\r\n      .then(res => res.json())\r\n      .then((data: { bankNames: string[]; segmentMapping: SegmentMapping[] }) => {\r\n        setAvailableBanks(data.bankNames || []);\r\n        setSegmentMapping(data.segmentMapping || []);\r\n      })\r\n      .catch(err => console.error('Error loading master data:', err));\r\n  }, []);\r\n\r\n  // 2) Load pending submissions\r\n  useEffect(() => {\r\n    fetch('/api/fetch-submissions')\r\n      .then(res => res.json())\r\n      .then((data: Submission[]) => {\r\n        if (!Array.isArray(data)) return;\r\n        const pending = data.filter(d => d.Status === 'Pending');\r\n        setSubmissions(pending);\r\n      })\r\n      .catch(err => console.error('Error loading submissions:', err));\r\n  }, []);\r\n\r\n  // 3) Compute segments for selected bank\r\n  useEffect(() => {\r\n    if (!bank) {\r\n      setAvailableSegments([]);\r\n      setSegment('');\r\n      setFiltered([]);\r\n      return;\r\n    }\r\n    const segs = segmentMapping\r\n      .filter(m => m.bank === bank)\r\n      .map(m => m.segment);\r\n    setAvailableSegments(Array.from(new Set(segs)));\r\n    setSegment('');\r\n    setFiltered([]);\r\n  }, [bank, segmentMapping]);\r\n\r\n  // 4) Filter submissions by bank & segment\r\n  useEffect(() => {\r\n    if (bank && segment) {\r\n      setFiltered(\r\n        submissions.filter(\r\n          s => s.BankName === bank && s.Segment === segment\r\n        )\r\n      );\r\n    }\r\n  }, [bank, segment, submissions]);\r\n\r\n  const highlightDiff = (orig: string, mod: string) => {\r\n    if (!orig || !mod) return '<i>Missing query</i>';\r\n    const dmp = new DiffMatchPatch();\r\n    const diff = dmp.diff_main(orig, mod);\r\n    dmp.diff_cleanupSemantic(diff);\r\n    return diff\r\n      .map(([type, text]: [number, string]) =>\r\n        type === DiffMatchPatch.DIFF_INSERT\r\n          ? `<b>${text}</b>`\r\n          : type === DiffMatchPatch.DIFF_DELETE\r\n          ? `<del>${text}</del>`\r\n          : text\r\n      )\r\n      .join('');\r\n  };\r\n\r\n  const handleApprove = async (item: Submission) => {\r\n    const approvedBy =\r\n      reviewer === 'Others'\r\n        ? customReviewer.trim() || 'Unknown'\r\n        : reviewer;\r\n    await fetch('/api/approve-submission', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ rowIndex: item.rowIndex, approvedBy }),\r\n    });\r\n    setSubmissions(s => s.filter(r => r.rowIndex !== item.rowIndex));\r\n    setFiltered(f => f.filter(r => r.rowIndex !== item.rowIndex));\r\n    alert(`Approved by ${approvedBy}!`);\r\n  };\r\n\r\n  const handleReject = async (item: Submission) => {\r\n    const rejectedBy =\r\n      reviewer === 'Others'\r\n        ? customReviewer.trim() || 'Unknown'\r\n        : reviewer;\r\n    await fetch('/api/reject-submission', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ rowIndex: item.rowIndex, rejectedBy }),\r\n    });\r\n    setSubmissions(s => s.filter(r => r.rowIndex !== item.rowIndex));\r\n    setFiltered(f => f.filter(r => r.rowIndex !== item.rowIndex));\r\n    alert(`Rejected by ${rejectedBy}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 mx-auto max-w-5xl\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Review Submissions</h1>\r\n\r\n      {/* Reviewer selector */}\r\n      <div className=\"mb-6\">\r\n        <label className=\"block font-semibold mb-2\">Reviewer:</label>\r\n        <select\r\n          value={reviewer}\r\n          onChange={e => setReviewer(e.target.value)}\r\n          className=\"border p-2 rounded\"\r\n        >\r\n          <option>Mohit</option>\r\n          <option>Bhaskar</option>\r\n          <option>Prerna</option>\r\n          <option>Others</option>\r\n        </select>\r\n        {reviewer === 'Others' && (\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your name\"\r\n            value={customReviewer}\r\n            onChange={e => setCustomReviewer(e.target.value)}\r\n            className=\"mt-2 border p-2 rounded w-full\"\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {/* Bank buttons */}\r\n      <div className=\"mb-4\">\r\n        <p className=\"font-semibold mb-2\">Select Bank:</p>\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {availableBanks.map((b, i) => (\r\n            <button\r\n              key={i}\r\n              onClick={() => setBank(b)}\r\n              className={`px-4 py-2 rounded ${\r\n                bank === b ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n              }`}\r\n            >\r\n              {b}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Segment buttons */}\r\n      {availableSegments.length > 0 && (\r\n        <div className=\"mb-6\">\r\n          <p className=\"font-semibold mb-2\">Select Segment:</p>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {availableSegments.map((s, i) => (\r\n              <button\r\n                key={i}\r\n                onClick={() => setSegment(s)}\r\n                className={`px-4 py-2 rounded ${\r\n                  segment === s ? 'bg-green-600 text-white' : 'bg-gray-200'\r\n                }`}\r\n              >\r\n                {s}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Pending rows */}\r\n      {filtered.map((item, idx) => (\r\n        <div key={idx} className=\"border rounded p-4 mb-4 bg-white\">\r\n          <p><strong>Submitted By:</strong> {item.SubmittedBy}</p>\r\n          <p><strong>Prompt:</strong> {item.Prompt}</p>\r\n          <p className=\"mt-2\"><strong>Changes:</strong></p>\r\n          <div\r\n            className=\"bg-gray-100 p-2 rounded whitespace-pre-wrap\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: highlightDiff(item.OriginalQuery, item.ModifiedQuery),\r\n            }}\r\n          />\r\n          <div className=\"mt-4 flex gap-2\">\r\n            <button\r\n              onClick={() => handleApprove(item)}\r\n              className=\"bg-green-600 text-white px-4 py-2 rounded\"\r\n            >\r\n              Approve\r\n            </button>\r\n            <button\r\n              onClick={() => handleReject(item)}\r\n              className=\"bg-red-600 text-white px-4 py-2 rounded\"\r\n            >\r\n              Reject\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      {bank && segment && filtered.length === 0 && (\r\n        <p>\r\n          No pending submissions for <em>{bank}</em> / <em>{segment}</em>.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/node_modules/diff-match-patch/index.js"],"sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}