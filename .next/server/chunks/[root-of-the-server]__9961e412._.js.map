{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CMDHR2804/query-builder/app/api/fetch-bank-segment/route.ts"],"sourcesContent":["import { google } from 'googleapis';\r\nimport { NextResponse } from 'next/server';\r\nimport { Buffer } from 'buffer';\r\n\r\n// Helper to decode and parse the service-account JSON from ENV\r\nfunction loadServiceAccount() {\r\n  const b64 = process.env.GOOGLE_SERVICE_KEY_JSON_B64;\r\n  if (!b64) throw new Error('Missing env var GOOGLE_SERVICE_KEY_JSON_B64');\r\n  const raw = Buffer.from(b64, 'base64').toString('utf8');\r\n  return JSON.parse(raw) as { private_key: string; client_email: string; [key: string]: any };\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Load and fix the service account credentials\r\n    const svc = loadServiceAccount();\r\n    svc.private_key = svc.private_key.replace(/\\\\n/g, '\\n');\r\n\r\n    // Authenticate with Google\r\n    const auth = new google.auth.GoogleAuth({\r\n      credentials: svc,\r\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n    });\r\n    const sheets = google.sheets({ version: 'v4', auth });\r\n\r\n    // Read master bank/segment data from Sheet1\r\n    const spreadsheetId = '1GwTyj7g0pbqyvwBiWbUXHi_J1qboJ2rryXgCXtpnvLM';\r\n    const range = 'Sheet1!A2:B';\r\n    const resp = await sheets.spreadsheets.values.get({ spreadsheetId, range });\r\n    const rows = resp.data.values || [];\r\n\r\n    // Extract unique bank names and build mapping\r\n    const bankNames = Array.from(new Set(rows.map(r => r[0]).filter(Boolean)));\r\n    const segmentMapping = rows\r\n      .filter(r => r[0] && r[1])\r\n      .map(r => ({ bank: r[0] as string, segment: r[1] as string }));\r\n\r\n    return NextResponse.json({ bankNames, segmentMapping });\r\n  } catch (err: any) {\r\n    console.error('Error fetching bank/segment:', err);\r\n    return NextResponse.json({ error: err.message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,+DAA+D;AAC/D,SAAS;IACP,MAAM,MAAM,QAAQ,GAAG,CAAC,2BAA2B;IACnD,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;IAC1B,MAAM,MAAM,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,KAAK,UAAU,QAAQ,CAAC;IAChD,OAAO,KAAK,KAAK,CAAC;AACpB;AAEO,eAAe;IACpB,IAAI;QACF,+CAA+C;QAC/C,MAAM,MAAM;QACZ,IAAI,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ;QAElD,2BAA2B;QAC3B,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,aAAa;YACb,QAAQ;gBAAC;aAA+C;QAC1D;QACA,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QAEnD,4CAA4C;QAC5C,MAAM,gBAAgB;QACtB,MAAM,QAAQ;QACd,MAAM,OAAO,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE;YAAe;QAAM;QACzE,MAAM,OAAO,KAAK,IAAI,CAAC,MAAM,IAAI,EAAE;QAEnC,8CAA8C;QAC9C,MAAM,YAAY,MAAM,IAAI,CAAC,IAAI,IAAI,KAAK,GAAG,CAAC,CAAA,IAAK,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC;QAChE,MAAM,iBAAiB,KACpB,MAAM,CAAC,CAAA,IAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EACxB,GAAG,CAAC,CAAA,IAAK,CAAC;gBAAE,MAAM,CAAC,CAAC,EAAE;gBAAY,SAAS,CAAC,CAAC,EAAE;YAAW,CAAC;QAE9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAW;QAAe;IACvD,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjE;AACF","debugId":null}}]
}